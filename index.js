// –ü—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è Telegram Mini App
require('dotenv').config();
const express = require('express');
const cors = require('cors');

const app = express();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ Telegram
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!ADMIN_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
let miniAppData = {
  pendingData: [],
  processedData: [],
  lastUpdate: null
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
let botData = {
  messages: [],
  requests: [],
  errors: [],
  reviews: [],
  support_requests: [],
  chat_messages: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
function addMiniAppData(payload, queryId = null) {
  const dataEntry = {
    id: Date.now(),
    timestamp: new Date().toISOString(),
    payload: payload,
    queryId: queryId,
    processed: false
  };
  
  miniAppData.pendingData.push(dataEntry);
  miniAppData.lastUpdate = new Date().toISOString();
  
  console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å: ${dataEntry.id}`);
  return dataEntry.id;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query
async function answerWebAppQuery(queryId, result) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerWebAppQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        web_app_query_id: queryId,
        result: result
      })
    });
    
    const responseData = await response.json();
    if (responseData.ok) {
      console.log(`‚úÖ WebApp Query ${queryId} –æ—Ç–≤–µ—á–µ–Ω`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, responseData);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
app.post('/webapp-data', async (req, res) => {
  try {
    const { payload, queryId } = req.body;
    
    console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App:', {
      type: payload.type,
      userId: payload.userData?.id,
      queryId: queryId
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–º
    const dataId = addMiniAppData(payload, queryId);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ WebApp Query –µ—Å–ª–∏ –µ—Å—Ç—å
    let answeredQuery = false;
    if (queryId) {
      const result = {
        type: 'article',
        id: 'success',
        title: '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
        input_message_content: {
          message_text: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!',
          parse_mode: 'HTML'
        }
      };
      
      answeredQuery = await answerWebAppQuery(queryId, result);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      dataId: dataId,
      answeredQuery,
      message: '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/bot/pending', (req, res) => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const pendingData = miniAppData.pendingData.filter(item => !item.processed);
    
    res.json({
      success: true,
      data: pendingData,
      count: pendingData.length,
      lastUpdate: miniAppData.lastUpdate
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
app.post('/api/bot/process', (req, res) => {
  try {
    const { dataIds } = req.body;
    
    if (!Array.isArray(dataIds)) {
      return res.status(400).json({
        success: false,
        error: 'dataIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }
    
    let processedCount = 0;
    
    dataIds.forEach(id => {
      const dataIndex = miniAppData.pendingData.findIndex(item => item.id === id);
      if (dataIndex !== -1) {
        const dataItem = miniAppData.pendingData[dataIndex];
        dataItem.processed = true;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        miniAppData.processedData.push(dataItem);
        miniAppData.pendingData.splice(dataIndex, 1);
        
        processedCount++;
      }
    });
    
    res.json({
      success: true,
      processedCount,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π`
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
let botDataCache = {
  messages: [],
  requests: [],
  errors: [],
  reviews: [],
  support_requests: [],
  chat_messages: [],
  chat_orders: [],
  average_rating: null
};

// –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
let activeUsers = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
let userDataCache = new Map(); // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –°–∏—Å—Ç–µ–º–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (SSE)
let sseClients = new Map(); // SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ user_id

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function sendRealTimeUpdate(userId, updateType, data) {
  const client = sseClients.get(userId);
  if (client) {
    try {
      const updateData = {
        type: updateType,
        data: data,
        timestamp: Date.now()
      };
      
      client.write(`data: ${JSON.stringify(updateData)}\n\n`);
      console.log(`‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${updateType}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      sseClients.delete(userId);
      return false;
    }
  }
  return false;
}

// SSE endpoint –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.get('/api/frontend/events/:user_id', (req, res) => {
  const userId = req.params.user_id;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  sseClients.set(userId, res);
  console.log(`üì° SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  res.write(`data: ${JSON.stringify({
    type: 'connected',
    message: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã',
    timestamp: Date.now()
  })}\n\n`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  req.on('close', () => {
    sseClients.delete(userId);
    console.log(`üì° SSE –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  });

  req.on('error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ SSE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    sseClients.delete(userId);
  });
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function cleanupInactiveUsers() {
  const cutoff = Date.now() - 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
  const inactiveUsers = [];
  
  for (const [userId, userData] of activeUsers.entries()) {
    if (userData.lastSeen < cutoff) {
      inactiveUsers.push(userId);
    }
  }
  
  inactiveUsers.forEach(userId => {
    activeUsers.delete(userId);
    userDataCache.delete(userId);
    sseClients.delete(userId); // –ó–∞–∫—Ä—ã–≤–∞–µ–º SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω 15+ –º–∏–Ω—É—Ç)`);
  });
  
  if (inactiveUsers.length > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${inactiveUsers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
function cleanupOldData() {
  const maxItemsPerType = 1000; // –ú–∞–∫—Å–∏–º—É–º 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
  const cutoffTime = Date.now() - 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
  
  Object.keys(botDataCache).forEach(type => {
    if (Array.isArray(botDataCache[type])) {
      const originalLength = botDataCache[type].length;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      botDataCache[type] = botDataCache[type].filter(item => {
        const itemTime = new Date(item.timestamp || item.received_at || 0).getTime();
        return itemTime > cutoffTime;
      });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (botDataCache[type].length > maxItemsPerType) {
        botDataCache[type] = botDataCache[type].slice(-maxItemsPerType);
      }
      
      const removedCount = originalLength - botDataCache[type].length;
      if (removedCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${removedCount} —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ ${type}`);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫—ç—à–µ
function removeDuplicates() {
  Object.keys(botDataCache).forEach(type => {
    if (Array.isArray(botDataCache[type])) {
      const originalLength = botDataCache[type].length;
      
      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ ID
      const uniqueMap = new Map();
      botDataCache[type].forEach(item => {
        if (item.id !== undefined) {
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ –µ—Å—Ç—å, –±–µ—Ä–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—ã–π
          if (uniqueMap.has(item.id)) {
            const existingItem = uniqueMap.get(item.id);
            const existingTime = new Date(existingItem.timestamp || existingItem.received_at || 0).getTime();
            const newTime = new Date(item.timestamp || item.received_at || 0).getTime();
            
            if (newTime > existingTime) {
              uniqueMap.set(item.id, item);
            }
          } else {
            uniqueMap.set(item.id, item);
          }
        } else {
          // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ ID –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω–µ—Ü
          uniqueMap.set(`no_id_${Date.now()}_${Math.random()}`, item);
        }
      });
      
      botDataCache[type] = Array.from(uniqueMap.values());
      
      const removedCount = originalLength - botDataCache[type].length;
      if (removedCount > 0) {
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${removedCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ ${type}`);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
function getCacheStats() {
  const stats = {};
  Object.keys(botDataCache).forEach(type => {
    if (Array.isArray(botDataCache[type])) {
      stats[type] = {
        count: botDataCache[type].length,
        hasDuplicates: false
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const ids = botDataCache[type].map(item => item.id).filter(id => id !== undefined);
      const uniqueIds = new Set(ids);
      if (ids.length !== uniqueIds.size) {
        stats[type].hasDuplicates = true;
        stats[type].duplicateCount = ids.length - uniqueIds.size;
      }
    } else {
      stats[type] = { count: 1, type: typeof botDataCache[type] };
    }
  });
  return stats;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(cleanupInactiveUsers, 5 * 60 * 1000);
// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(cleanupOldData, 30 * 60 * 1000);
// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(removeDuplicates, 10 * 60 * 1000);

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
app.get('/api/admin/cache-stats', (req, res) => {
  try {
    const stats = getCacheStats();
    const activeUsersCount = activeUsers.size;
    const userDataCount = userDataCache.size;
    const sseConnectionsCount = sseClients.size;
    
    res.json({
      success: true,
      cache_stats: stats,
      active_users: activeUsersCount,
      user_data_cache: userDataCount,
      sse_connections: sseConnectionsCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
app.post('/api/admin/remove-duplicates', (req, res) => {
  try {
    const beforeStats = getCacheStats();
    removeDuplicates();
    const afterStats = getCacheStats();
    
    const removedCounts = {};
    Object.keys(beforeStats).forEach(type => {
      if (beforeStats[type].count && afterStats[type].count) {
        const removed = beforeStats[type].count - afterStats[type].count;
        if (removed > 0) {
          removedCounts[type] = removed;
        }
      }
    });
    
    res.json({
      success: true,
      message: '–î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã',
      removed_counts: removedCounts,
      before_stats: beforeStats,
      after_stats: afterStats
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
app.post('/api/bot/data', (req, res) => {
  try {
    const { type, data } = req.body;
    
    if (!type || !data) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, data'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    if (botDataCache[type] !== undefined) {
      if (type === 'average_rating') {
        // –î–ª—è —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        botDataCache[type] = data;
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç –±–æ—Ç–∞: ${data.average_rating}/5 (${data.total_reviews} –æ—Ç–∑—ã–≤–æ–≤)`);
      } else if (type === 'reviews' || type === 'requests' || type === 'chat_messages' || type === 'chat_orders') {
        // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤, –∑–∞–∫–∞–∑–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏ –∑–∞–∫–∞–∑–æ–≤ —á–∞—Ç–∞ –û–ë–™–ï–î–ò–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ
        if (Array.isArray(data)) {
          if (Array.isArray(botDataCache[type])) {
            // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const existingMap = new Map();
            botDataCache[type].forEach(item => {
              if (item.id !== undefined) {
                existingMap.set(item.id, item);
              }
            });
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const newItems = [];
            const duplicateIds = [];
            
            data.forEach(item => {
              if (item.id !== undefined) {
                if (existingMap.has(item.id)) {
                  duplicateIds.push(item.id);
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                  const existingItem = existingMap.get(item.id);
                  if (JSON.stringify(existingItem) !== JSON.stringify(item)) {
                    existingMap.set(item.id, item);
                    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${type} —Å ID ${item.id}`);
                  }
                } else {
                  newItems.push(item);
                }
              } else {
                // –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç ID, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                newItems.push(item);
              }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            botDataCache[type] = Array.from(existingMap.values());
            
            if (newItems.length > 0) {
              botDataCache[type] = [...botDataCache[type], ...newItems];
              console.log(`üì• –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã ${type} –æ—Ç –±–æ—Ç–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newItems.length} –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ ${data.length}`);
            }
            
            if (duplicateIds.length > 0) {
              console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${duplicateIds.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ ${type}: ${duplicateIds.slice(0, 5).join(', ')}${duplicateIds.length > 5 ? '...' : ''}`);
            }
            
            console.log(`üìä –ò—Ç–æ–≥–æ –≤ –∫—ç—à–µ ${type}: ${botDataCache[type].length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
          } else {
            // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            botDataCache[type] = [...data];
            console.log(`üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ${type} –æ—Ç –±–æ—Ç–∞: ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
          }
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤, –∑–∞–º–µ–Ω—è–µ–º
          botDataCache[type] = data;
          console.log(`üì• –ó–∞–º–µ–Ω–µ–Ω—ã ${type} –æ—Ç –±–æ—Ç–∞: ${typeof data}`);
        }
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(data)) {
          // –≠—Ç–æ –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
          if (Array.isArray(botDataCache[type])) {
            const existingMap = new Map();
            botDataCache[type].forEach(item => {
              if (item.id !== undefined) {
                existingMap.set(item.id, item);
              }
            });
            
            const newItems = [];
            data.forEach(item => {
              if (item.id !== undefined) {
                if (existingMap.has(item.id)) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                  existingMap.set(item.id, item);
                } else {
                  newItems.push(item);
                }
              } else {
                newItems.push(item);
              }
            });
            
            botDataCache[type] = Array.from(existingMap.values());
            
            if (newItems.length > 0) {
              botDataCache[type] = [...botDataCache[type], ...newItems];
              console.log(`üì• –û–±—ä–µ–¥–∏–Ω–µ–Ω –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type} - –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newItems.length} –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ ${data.length}`);
            } else {
              console.log(`üì• –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type} - –≤—Å–µ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç`);
            }
          } else {
            botDataCache[type] = [...data];
            console.log(`üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type} - ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
          }
        } else {
          // –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (Array.isArray(botDataCache[type])) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const existingIndex = botDataCache[type].findIndex(item => item.id === data.id);
            if (existingIndex === -1) {
              botDataCache[type].push(data);
              console.log(`üì• –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞: ${type}`);
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
              botDataCache[type][existingIndex] = data;
              console.log(`üì• –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞: ${type}, ID: ${data.id}`);
            }
          } else {
            botDataCache[type] = [data];
            console.log(`üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞: ${type}`);
          }
        }
      }
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type}`);
    }
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –±–æ—Ç–∞
app.post('/api/bot/user-data', (req, res) => {
  try {
    const { user_id, data } = req.body;
    
    if (!user_id || !data) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, data'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldData = userDataCache.get(user_id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
    userDataCache.set(user_id, {
      ...data,
      lastUpdate: Date.now()
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (activeUsers.has(user_id)) {
      activeUsers.get(user_id).lastSeen = Date.now();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (oldData) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
      const oldOrdersCount = oldData.orders_count || 0;
      const newOrdersCount = data.orders_count || 0;
      if (newOrdersCount > oldOrdersCount) {
        console.log(`üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newOrdersCount - oldOrdersCount} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        sendRealTimeUpdate(user_id, 'new_orders', {
          count: newOrdersCount - oldOrdersCount,
          orders: data.orders,
          total_orders: newOrdersCount
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const oldMessagesCount = oldData.chat_messages_count || 0;
      const newMessagesCount = data.chat_messages_count || 0;
      if (newMessagesCount > oldMessagesCount) {
        console.log(`üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newMessagesCount - oldMessagesCount} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        sendRealTimeUpdate(user_id, 'new_messages', {
          count: newMessagesCount - oldMessagesCount,
          messages: data.chat_messages,
          total_messages: newMessagesCount
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
      if (data.orders && oldData.orders) {
        const statusChanges = [];
        data.orders.forEach(newOrder => {
          const oldOrder = oldData.orders.find(o => o.id === newOrder.id);
          if (oldOrder && oldOrder.status !== newOrder.status) {
            statusChanges.push({
              order_id: newOrder.id,
              old_status: oldOrder.status,
              new_status: newOrder.status,
              service: newOrder.service_name
            });
          }
        });
        
        if (statusChanges.length > 0) {
          console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${statusChanges.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
          sendRealTimeUpdate(user_id, 'status_changes', {
            changes: statusChanges,
            count: statusChanges.length
          });
        }
      }
    } else {
      // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      console.log(`üéâ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
      sendRealTimeUpdate(user_id, 'data_ready', {
        orders_count: data.orders_count || 0,
        messages_count: data.chat_messages_count || 0,
        message: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
      });
    }
    
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}: ${data.orders_count || 0} –∑–∞–∫–∞–∑–æ–≤, ${data.chat_messages_count || 0} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/frontend/register-user', (req, res) => {
  try {
    const { user_id } = req.body;
    
    if (!user_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id'
      });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    activeUsers.set(user_id, {
      lastSeen: Date.now(),
      registeredAt: Date.now()
    });
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –±–æ—Ç—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user_id !== 'unknown') {
      console.log(`üöÄ –ó–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
      // –ë–æ—Ç –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ /api/bot/pending
    }
    
    res.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user_id: user_id,
      immediate_load_requested: user_id !== 'unknown'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/frontend/request-immediate-load', (req, res) => {
  try {
    const { user_id } = req.body;
    
    if (!user_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id'
      });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!activeUsers.has(user_id)) {
      activeUsers.set(user_id, {
        lastSeen: Date.now(),
        registeredAt: Date.now()
      });
    } else {
      activeUsers.get(user_id).lastSeen = Date.now();
    }
    
    console.log(`‚ö° –ó–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
    
    res.json({
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—è—Ç',
      user_id: user_id
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –±–æ—Ç–∞)
app.get('/api/bot/active-users', (req, res) => {
  try {
    const activeUsersList = [];
    
    for (const [userId, userData] of activeUsers.entries()) {
      activeUsersList.push({
        user_id: userId,
        lastSeen: userData.lastSeen,
        registeredAt: userData.registeredAt,
        isActive: (Date.now() - userData.lastSeen) < 15 * 60 * 1000 // –ê–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –±—ã–ª –æ–Ω–ª–∞–π–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç
      });
    }
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsersList.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    res.json({
      success: true,
      active_users: activeUsersList,
      count: activeUsersList.length,
      timestamp: Date.now()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è heartbeat (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
app.post('/api/frontend/heartbeat', (req, res) => {
  try {
    const { user_id } = req.body;
    
    if (!user_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (activeUsers.has(user_id)) {
      activeUsers.get(user_id).lastSeen = Date.now();
    }
    
    res.json({
      success: true,
      message: 'Heartbeat –ø–æ–ª—É—á–µ–Ω',
      user_id: user_id
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ heartbeat:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/frontend/user-data/:user_id', (req, res) => {
  try {
    const { user_id } = req.params;
    
    if (!user_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
    if (userDataCache.has(user_id)) {
      const userData = userDataCache.get(user_id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
      const dataAge = Date.now() - userData.lastUpdate;
      if (dataAge < 5 * 60 * 1000) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        return res.json({
          success: true,
          data: userData,
          fromCache: true,
          dataAge: Math.round(dataAge / 1000)
        });
      }
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
    console.log(`üì≠ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏`);
    res.json({
      success: false,
      error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏',
      user_id: user_id
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
// –ë—ç–∫–µ–Ω–¥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≤—Å—é –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ª–∞–µ—Ç –±–æ—Ç
app.get('/api/frontend/data/:type', async (req, res) => {
  try {
    const { type } = req.params;
    
    if (botDataCache[type] === undefined) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${type}`
      });
    }
    
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    // –ë–æ—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    res.json({
      success: true,
      data: botDataCache[type] || [],
      count: Array.isArray(botDataCache[type]) ? botDataCache[type].length : 1,
      total: Array.isArray(botDataCache[type]) ? botDataCache[type].length : 1
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/frontend/stats', async (req, res) => {
  try {
    const stats = {
      messages: botDataCache.messages.length,
      requests: botDataCache.requests.length,
      errors: botDataCache.errors.length,
      reviews: botDataCache.reviews.length,
      support_requests: botDataCache.support_requests.length,
      chat_messages: botDataCache.chat_messages.length,
      chat_orders: botDataCache.chat_orders.length,
      average_rating: botDataCache.average_rating ? botDataCache.average_rating.average_rating : 0,
      total_reviews: botDataCache.average_rating ? botDataCache.average_rating.total_reviews : 0
    };
    
    res.json({
      success: true,
      stats: stats
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
app.post('/api/bot/clear-cache', (req, res) => {
  try {
    const { type } = req.body;
    
    if (type) {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
      if (botDataCache[type] !== undefined) {
        if (type === 'average_rating') {
          botDataCache[type] = null;
        } else {
          botDataCache[type] = [];
        }
        console.log(`üßπ –ö—ç—à ${type} –æ—á–∏—â–µ–Ω –±–æ—Ç–æ–º`);
      }
    } else {
      // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
      botDataCache = {
        messages: [],
        requests: [],
        errors: [],
        reviews: [],
        support_requests: [],
        chat_messages: [],
        chat_orders: [],
        average_rating: null
      };
      console.log('üßπ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω –±–æ—Ç–æ–º');
    }
    
    res.json({
      success: true,
      message: type ? `–ö—ç—à ${type} –æ—á–∏—â–µ–Ω` : '–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
app.post('/api/bot/store', (req, res) => {
  try {
    const { type, data, timestamp } = req.body;
    
    if (!type || !data) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, data'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const dataWithTimestamp = {
      ...data,
      timestamp: timestamp || new Date().toISOString(),
      received_at: new Date().toISOString()
    };
    
    if (botData[type]) {
      botData[type].push(dataWithTimestamp);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${type}, ID: ${data.id}`);
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${type}`);
    }
    
    res.json({
      success: true,
      message: `–î–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ ${type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`,
      count: botData[type] ? botData[type].length : 0
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ª—é–±—ã—Ö —Å–æ–±—ã—Ç–∏–π
app.post('/api/event', async (req, res) => {
  try {
    const { type, data: eventData, userData, queryId } = req.body;
    
    const payload = {
      type: type,
      data: eventData,
      userData: userData
    };

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    const response = await fetch(`${req.protocol}://${req.get('host')}/webapp-data`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ payload, queryId })
    });

    const result = await response.json();
    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/event:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    ok: true,
    timestamp: new Date().toISOString(),
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫'
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>‚úÖ Backend-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
    <p><strong>–†–æ–ª—å:</strong> –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±–æ—Ç–æ–º</p>
    <p><strong>URL:</strong> <code>https://server-iyp2.onrender.com</code></p>
    <p><strong>Endpoints:</strong></p>
    <ul>
      <li><code>POST /webapp-data</code> ‚Äî –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App</li>
      <li><code>GET /api/bot/data</code> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞</li>
      <li><code>POST /api/bot/process</code> ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö</li>
      <li><code>POST /api/event</code> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Å–æ–±—ã—Ç–∏–π</li>
      <li><code>GET /health</code> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
    </ul>
    <p><strong>–§—É–Ω–∫—Ü–∏–∏:</strong></p>
    <ul>
      <li>üì® –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞</li>
      <li>üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ø–∞–º—è—Ç–∏</li>
      <li>ü§ñ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –ø–æ –∑–∞–ø—Ä–æ—Å—É</li>
      <li>‚úÖ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ WebApp Query</li>
    </ul>
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <ul>
      <li>–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${miniAppData.pendingData.length}</li>
      <li>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: ${miniAppData.processedData.length}</li>
      <li>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${miniAppData.lastUpdate || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</li>
    </ul>
  `);
});

// –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç –¥–ª—è Render
const PORT = process.env.PORT || 10000;
const HOST = '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log('üöÄ Backend-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—É—â–µ–Ω–æ!');
  console.log(`üìç URL: https://server-iyp2.onrender.com`);
  console.log(`ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üë§ Admin ID: ${ADMIN_ID}`);
  console.log(`üì° –†–µ–∂–∏–º: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏`);
  console.log(`üìä Endpoints: /api/bot/data, /api/bot/process, /api/frontend/events`);
});