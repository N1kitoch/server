// index.js ‚Äî –ë—ç–∫–µ–Ω–¥ –¥–ª—è Telegram Mini App
require('dotenv').config();
const express = require('express');
const cors = require('cors');

const app = express();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ Telegram
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!ADMIN_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç
async function sendToBot(chatId, message, parseMode = 'HTML') {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: parseMode
      })
    });
    
    const result = await response.json();
    if (result.ok) {
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, result);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query
async function answerWebAppQuery(queryId, result) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerWebAppQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        web_app_query_id: queryId,
        result: result
      })
    });
    
    const responseData = await response.json();
    if (responseData.ok) {
      console.log(`‚úÖ WebApp Query ${queryId} –æ—Ç–≤–µ—á–µ–Ω`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, responseData);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, error);
    return false;
  }
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async function processWebAppData(payload, queryId = null) {
  try {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App:', { 
      type: payload.type, 
      userId: payload.userData?.id,
      queryId: queryId 
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (payload.userData) {
      const userId = payload.userData.id;
      data.users[userId] = {
        ...payload.userData,
        lastInteraction: new Date().toISOString(),
        lastPayloadType: payload.type
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    data.updates.push({
      type: payload.type,
      payload: payload,
      receivedAt: new Date().toISOString(),
      queryId: queryId
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    data.timestamp = new Date().toISOString();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const shouldNotifyAdmin = isImportantEvent(payload.type);
    
    let sentToAdmin = false;
    if (shouldNotifyAdmin) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      const adminMessage = formatAdminMessage(payload);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      sentToAdmin = await sendToBot(ADMIN_ID, adminMessage);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`üìä –°–æ–±—ã—Ç–∏–µ ${payload.type} –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É)`);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å queryId, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ WebApp Query
    let answeredQuery = false;
    if (queryId) {
      const result = {
        type: 'article',
        id: 'success',
        title: '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
        input_message_content: {
          message_text: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!',
          parse_mode: 'HTML'
        }
      };
      
      answeredQuery = await answerWebAppQuery(queryId, result);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      type: payload.type,
      userId: payload.userData?.id,
      sentToAdmin,
      answeredQuery,
      isImportant: shouldNotifyAdmin
    });

    return {
      success: true,
      sentToAdmin,
      answeredQuery,
      logged: true,
      message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
function isImportantEvent(eventType) {
  const importantEvents = [
    'contact_form',      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã
    'service_interest',  // –ò–Ω—Ç–µ—Ä–µ—Å –∫ —É—Å–ª—É–≥–∞–º
    'order_submit',      // –ó–∞–∫–∞–∑—ã
    'payment_request',   // –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–ø–ª–∞—Ç—É
    'error_report',      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    'support_request'    // –ó–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  ];
  
  return importantEvents.includes(eventType);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function formatAdminMessage(payload) {
  const baseMessage = `üì± **–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ Mini App**\n\n` +
    `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${payload.userData?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${payload.userData?.lastName || ''}\n` +
    `üÜî **ID:** ${payload.userData?.id || '‚Äî'}\n` +
    `üìù **–¢–∏–ø:** ${payload.type || 'unknown'}\n` +
    `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleString('ru-RU')}\n\n`;

  let detailsMessage = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
  switch (payload.type) {
    case 'contact_form':
      detailsMessage = `üìã **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞:**\n` +
        `–ò–º—è: ${payload.formData?.name || '‚Äî'}\n` +
        `–°–æ–æ–±—â–µ–Ω–∏–µ: ${payload.formData?.message || '‚Äî'}`;
      break;
    case 'service_interest':
      detailsMessage = `üéØ **–ò–Ω—Ç–µ—Ä–µ—Å –∫ —É—Å–ª—É–≥–µ:**\n` +
        `–£—Å–ª—É–≥–∞: ${payload.service || '‚Äî'}`;
      break;
    case 'order_submit':
      detailsMessage = `üõí **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:**\n` +
        `–¢–æ–≤–∞—Ä: ${payload.product || '‚Äî'}\n` +
        `–°—É–º–º–∞: ${payload.amount || '‚Äî'}`;
      break;
    case 'payment_request':
      detailsMessage = `üí≥ **–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É:**\n` +
        `–°—É–º–º–∞: ${payload.amount || '‚Äî'}\n` +
        `–ú–µ—Ç–æ–¥: ${payload.paymentMethod || '‚Äî'}`;
      break;
    case 'error_report':
      detailsMessage = `‚ö†Ô∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n` +
        `–û—à–∏–±–∫–∞: ${payload.error || '‚Äî'}\n` +
        `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${payload.page || '‚Äî'}\n` +
        `–°—Ç–µ–∫: ${payload.stack || '‚Äî'}`;
      break;
    case 'support_request':
      detailsMessage = `üÜò **–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n` +
        `–¢–µ–º–∞: ${payload.topic || '‚Äî'}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${payload.description || '‚Äî'}`;
      break;
    default:
      detailsMessage = `üìÑ **–î–∞–Ω–Ω—ã–µ:**\n${JSON.stringify(payload, null, 2)}`;
  }

  return baseMessage + detailsMessage;
}

// –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏
let data = {
  message: "–ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω!",
  timestamp: new Date().toISOString(),
  updates: [],
  users: {},
  analytics: {
    totalRequests: 0,
    requestsByType: {},
    requestsByUser: {},
    errors: []
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.get('/health', (req, res) => {
  res.json({ 
    ok: true, 
    timestamp: new Date().toISOString(),
    stats: {
      totalRequests: data.analytics.totalRequests,
      totalUsers: Object.keys(data.users).length,
      totalUpdates: data.updates.length
    }
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±–æ—Ç–∞)
app.get('/api/data', (req, res) => {
  res.json(data);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
  const stats = {
    totalRequests: data.analytics.totalRequests,
    requestsByType: data.analytics.requestsByType,
    requestsByUser: data.analytics.requestsByUser,
    totalUsers: Object.keys(data.users).length,
    totalUpdates: data.updates.length,
    lastUpdate: data.timestamp
  };
  res.json(stats);
});

// –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π endpoint)
app.post('/webapp-data', async (req, res) => {
  try {
    const { initData, payload, queryId } = req.body;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    data.analytics.totalRequests++;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ —Ç–∏–ø—É
    const type = payload.type || 'unknown';
    data.analytics.requestsByType[type] = (data.analytics.requestsByType[type] || 0) + 1;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (payload.userData?.id) {
      const userId = payload.userData.id;
      data.analytics.requestsByUser[userId] = (data.analytics.requestsByUser[userId] || 0) + 1;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const result = await processWebAppData(payload, queryId);

    // –û—Ç–≤–µ—Ç
    res.json(result);

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /webapp-data:', err);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    data.analytics.errors.push({
      timestamp: new Date().toISOString(),
      error: err.message,
      stack: err.stack
    });
    
    res.status(500).json({ 
      success: false, 
      error: 'Internal Server Error',
      message: err.message 
    });
  }
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/event', async (req, res) => {
  try {
    const { type, data: eventData, userData, queryId } = req.body;
    
    const payload = {
      type: type,
      ...eventData,
      userData: userData,
      timestamp: new Date().toISOString()
    };

    const result = await processWebAppData(payload, queryId);
    res.json(result);

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/event:', err);
    res.status(500).json({ 
      success: false, 
      error: 'Internal Server Error' 
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId', (req, res) => {
  const userId = req.params.userId;
  const userData = data.users[userId];
  
  if (userData) {
    res.json({
      success: true,
      user: userData,
      stats: {
        totalRequests: data.analytics.requestsByUser[userId] || 0,
        lastActivity: userData.lastInteraction
      }
    });
  } else {
    res.status(404).json({
      success: false,
      error: 'User not found'
    });
  }
});

// Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/clear', (req, res) => {
  try {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = {
      message: "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã",
      timestamp: new Date().toISOString(),
      updates: [],
      users: {},
      analytics: {
        totalRequests: 0,
        requestsByType: {},
        requestsByUser: {},
        errors: []
      }
    };
    
    console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    res.status(500).json({
      success: false,
      error: 'Internal Server Error'
    });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
    <p>URL: <code>https://server-iyp2.onrender.com</code></p>
    <p>–ú–∞—Ä—à—Ä—É—Ç—ã:</p>
    <ul>
      <li><a href="/health">/health</a> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞</li>
      <li><a href="/api/data">/api/data</a> ‚Äî –¥–∞–Ω–Ω—ã–µ</li>
      <li><a href="/api/stats">/api/stats</a> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</li>
    </ul>
    <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Telegram Mini App.</p>
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <ul>
      <li>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${data.analytics.totalRequests}</li>
      <li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(data.users).length}</li>
      <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${data.updates.length}</li>
    </ul>
  `);
});

// –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render)
const PORT = process.env.PORT || 10000;
const HOST = '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
  console.log(`Backend URL: https://server-iyp2.onrender.com`);
  console.log(`Bot Token: ${BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`Admin ID: ${ADMIN_ID}`);
  console.log(`üìä –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
});