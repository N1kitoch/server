// –ü—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è Telegram Mini App
require('dotenv').config();
const express = require('express');
const cors = require('cors');

const app = express();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ Telegram
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!ADMIN_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
let miniAppData = {
  pendingData: [],
  processedData: [],
  lastUpdate: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
function addMiniAppData(payload, queryId = null) {
  const dataEntry = {
    id: Date.now(),
    timestamp: new Date().toISOString(),
    payload: payload,
    queryId: queryId,
    processed: false
  };
  
  miniAppData.pendingData.push(dataEntry);
  miniAppData.lastUpdate = new Date().toISOString();
  
  console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å: ${dataEntry.id}`);
  return dataEntry.id;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query
async function answerWebAppQuery(queryId, result) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerWebAppQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        web_app_query_id: queryId,
        result: result
      })
    });
    
    const responseData = await response.json();
    if (responseData.ok) {
      console.log(`‚úÖ WebApp Query ${queryId} –æ—Ç–≤–µ—á–µ–Ω`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, responseData);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
app.post('/webapp-data', async (req, res) => {
  try {
    const { payload, queryId } = req.body;
    
    console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App:', {
      type: payload.type,
      userId: payload.userData?.id,
      queryId: queryId
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–º
    const dataId = addMiniAppData(payload, queryId);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ WebApp Query –µ—Å–ª–∏ –µ—Å—Ç—å
    let answeredQuery = false;
    if (queryId) {
      const result = {
        type: 'article',
        id: 'success',
        title: '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
        input_message_content: {
          message_text: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!',
          parse_mode: 'HTML'
        }
      };
      
      answeredQuery = await answerWebAppQuery(queryId, result);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      dataId: dataId,
      answeredQuery,
      message: '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/bot/data', (req, res) => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const pendingData = miniAppData.pendingData.filter(item => !item.processed);
    
    res.json({
      success: true,
      data: pendingData,
      count: pendingData.length,
      lastUpdate: miniAppData.lastUpdate
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
app.post('/api/bot/process', (req, res) => {
  try {
    const { dataIds } = req.body;
    
    if (!Array.isArray(dataIds)) {
      return res.status(400).json({
        success: false,
        error: 'dataIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }
    
    let processedCount = 0;
    
    dataIds.forEach(id => {
      const dataIndex = miniAppData.pendingData.findIndex(item => item.id === id);
      if (dataIndex !== -1) {
        const dataItem = miniAppData.pendingData[dataIndex];
        dataItem.processed = true;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        miniAppData.processedData.push(dataItem);
        miniAppData.pendingData.splice(dataIndex, 1);
        
        processedCount++;
      }
    });
    
    res.json({
      success: true,
      processedCount,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π`
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ª—é–±—ã—Ö —Å–æ–±—ã—Ç–∏–π
app.post('/api/event', async (req, res) => {
  try {
    const { type, data: eventData, userData, queryId } = req.body;
    
    const payload = {
      type: type,
      data: eventData,
      userData: userData
    };

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    const response = await fetch(`${req.protocol}://${req.get('host')}/webapp-data`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ payload, queryId })
    });

    const result = await response.json();
    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/event:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    ok: true,
    timestamp: new Date().toISOString(),
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫'
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>‚úÖ Backend-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
    <p><strong>–†–æ–ª—å:</strong> –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±–æ—Ç–æ–º</p>
    <p><strong>URL:</strong> <code>https://server-iyp2.onrender.com</code></p>
    <p><strong>Endpoints:</strong></p>
    <ul>
      <li><code>POST /webapp-data</code> ‚Äî –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App</li>
      <li><code>GET /api/bot/data</code> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞</li>
      <li><code>POST /api/bot/process</code> ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö</li>
      <li><code>POST /api/event</code> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Å–æ–±—ã—Ç–∏–π</li>
      <li><code>GET /health</code> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
    </ul>
    <p><strong>–§—É–Ω–∫—Ü–∏–∏:</strong></p>
    <ul>
      <li>üì® –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞</li>
      <li>üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ø–∞–º—è—Ç–∏</li>
      <li>ü§ñ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –ø–æ –∑–∞–ø—Ä–æ—Å—É</li>
      <li>‚úÖ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ WebApp Query</li>
    </ul>
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <ul>
      <li>–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${miniAppData.pendingData.length}</li>
      <li>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: ${miniAppData.processedData.length}</li>
      <li>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${miniAppData.lastUpdate || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</li>
    </ul>
  `);
});

// –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç –¥–ª—è Render
const PORT = process.env.PORT || 10000;
const HOST = '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log('üöÄ Backend-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—É—â–µ–Ω–æ!');
  console.log(`üìç URL: https://server-iyp2.onrender.com`);
  console.log(`ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üë§ Admin ID: ${ADMIN_ID}`);
  console.log(`üì° –†–µ–∂–∏–º: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞`);
  console.log(`üìä Endpoints: /api/bot/data, /api/bot/process`);
});