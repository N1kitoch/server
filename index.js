// –ü—Ä–æ—Å—Ç–æ–π –±—ç–∫–µ–Ω–¥-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è Telegram Mini App
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const compression = require('compression');

const app = express();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ Telegram
app.use(cors());
app.use(compression()); // –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!ADMIN_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
let miniAppData = {
  pendingData: [],
  processedData: [],
  lastUpdate: null
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
let botData = {
  messages: [],
  requests: [],
  errors: [],
  reviews: [],
  support_requests: [],
  chat_messages: []
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
let sseConnections = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function sendSSEUpdate(data) {
  const sseData = `data: ${JSON.stringify(data)}\n\n`;
  
  sseConnections.forEach(client => {
    try {
      client.res.write(sseData);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE –∫–ª–∏–µ–Ω—Ç—É:', error.message);
      sseConnections.delete(client);
    }
  });
}

// SSE endpoint –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É
app.get('/events', (req, res) => {
  console.log('üîÑ –ù–æ–≤–æ–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞');
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  res.write('data: {"type": "connected", "message": "SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}\n\n');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  const client = { res, id: Date.now() };
  sseConnections.add(client);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  req.on('close', () => {
    console.log('üîå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    sseConnections.delete(client);
  });
  
  req.on('error', (error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
    sseConnections.delete(client);
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
function addMiniAppData(payload, queryId = null) {
  const dataEntry = {
    id: Date.now(),
    timestamp: new Date().toISOString(),
    payload: payload,
    queryId: queryId,
    processed: false
  };
  
  miniAppData.pendingData.push(dataEntry);
  miniAppData.lastUpdate = new Date().toISOString();
  
  console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å: ${dataEntry.id}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç—É —á–µ—Ä–µ–∑ SSE
  const sseNotification = {
    type: getSSENotificationType(payload.type),
    payload: {
      id: dataEntry.id,
      timestamp: dataEntry.timestamp,
      ...payload
    }
  };
  
  sendSSEUpdate(sseNotification);
  console.log(`üì° SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sseNotification.type}`);
  
  return dataEntry.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getSSENotificationType(payloadType) {
  switch (payloadType) {
    case 'chat_message':
      return 'new_chat_message';
    case 'service_interest':
      return 'new_order';
    case 'review_submit':
      return 'new_review';
    default:
      return 'new_data';
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query
async function answerWebAppQuery(queryId, result) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerWebAppQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        web_app_query_id: queryId,
        result: result
      })
    });
    
    const responseData = await response.json();
    if (responseData.ok) {
      console.log(`‚úÖ WebApp Query ${queryId} –æ—Ç–≤–µ—á–µ–Ω`);
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, responseData);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ WebApp Query ${queryId}:`, error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
app.post('/webapp-data', async (req, res) => {
  try {
    const { payload, queryId } = req.body;
    
    console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App:', {
      type: payload.type,
      userId: payload.userData?.id,
      queryId: queryId
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–º
    const dataId = addMiniAppData(payload, queryId);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ WebApp Query –µ—Å–ª–∏ –µ—Å—Ç—å
    let answeredQuery = false;
    if (queryId) {
      const result = {
        type: 'article',
        id: 'success',
        title: '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
        input_message_content: {
          message_text: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!',
          parse_mode: 'HTML'
        }
      };
      
      answeredQuery = await answerWebAppQuery(queryId, result);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      dataId: dataId,
      answeredQuery,
      message: '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/bot/pending', (req, res) => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const pendingData = miniAppData.pendingData.filter(item => !item.processed);
    
    res.json({
      success: true,
      data: pendingData,
      count: pendingData.length,
      lastUpdate: miniAppData.lastUpdate
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –±–æ—Ç–∞ - –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
app.post('/api/bot/process', (req, res) => {
  try {
    const { dataIds } = req.body;
    
    if (!Array.isArray(dataIds)) {
      return res.status(400).json({
        success: false,
        error: 'dataIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }
    
    let processedCount = 0;
    
    dataIds.forEach(id => {
      const dataIndex = miniAppData.pendingData.findIndex(item => item.id === id);
      if (dataIndex !== -1) {
        const dataItem = miniAppData.pendingData[dataIndex];
        dataItem.processed = true;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        miniAppData.processedData.push(dataItem);
        miniAppData.pendingData.splice(dataIndex, 1);
        
        processedCount++;
      }
    });
    
    res.json({
      success: true,
      processedCount,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π`
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
let botDataCache = {
  messages: [],
  requests: [],
  errors: [],
  reviews: [],
  support_requests: [],
  chat_messages: [],
  chat_orders: [],
  average_rating: null
};

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
app.post('/api/bot/data', (req, res) => {
  try {
    const { type, data } = req.body;
    
    if (!type || !data) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, data'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    if (botDataCache[type] !== undefined) {
      if (type === 'average_rating') {
        // –î–ª—è —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        botDataCache[type] = data;
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç –±–æ—Ç–∞: ${data.average_rating}/5 (${data.total_reviews} –æ—Ç–∑—ã–≤–æ–≤)`);
      } else if (type === 'reviews' || type === 'requests' || type === 'chat_messages' || type === 'chat_orders') {
        // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤, –∑–∞–∫–∞–∑–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏ –∑–∞–∫–∞–∑–æ–≤ —á–∞—Ç–∞ –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤
        botDataCache[type] = data;
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã ${type} –æ—Ç –±–æ—Ç–∞: ${Array.isArray(data) ? data.length : 1} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞)`);
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (Array.isArray(data)) {
          // –≠—Ç–æ –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤
          botDataCache[type] = data;
          console.log(`üì• –ü–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type} - ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞)`);
        } else {
          // –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          botDataCache[type].push(data);
          console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞: ${type}`);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
      sendSSEUpdate({
        type: 'data_update',
        dataType: type,
        data: data,
        timestamp: new Date().toISOString()
      });
      
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞: ${type}`);
    }
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
// –ë—ç–∫–µ–Ω–¥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≤—Å—é –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ª–∞–µ—Ç –±–æ—Ç
app.get('/api/frontend/data/:type', async (req, res) => {
  try {
    const { type } = req.params;
    
    if (botDataCache[type] === undefined) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${type}`
      });
    }
    
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    // –ë–æ—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    res.json({
      success: true,
      data: botDataCache[type] || [],
      count: Array.isArray(botDataCache[type]) ? botDataCache[type].length : 1,
      total: Array.isArray(botDataCache[type]) ? botDataCache[type].length : 1
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/frontend/stats', async (req, res) => {
  try {
    const stats = {
      messages: botDataCache.messages.length,
      requests: botDataCache.requests.length,
      errors: botDataCache.errors.length,
      reviews: botDataCache.reviews.length,
      support_requests: botDataCache.support_requests.length,
      chat_messages: botDataCache.chat_messages.length,
      chat_orders: botDataCache.chat_orders.length,
      average_rating: botDataCache.average_rating ? botDataCache.average_rating.average_rating : 0,
      total_reviews: botDataCache.average_rating ? botDataCache.average_rating.total_reviews : 0
    };
    
    res.json({
      success: true,
      stats: stats
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
app.post('/api/bot/clear-cache', (req, res) => {
  try {
    const { type } = req.body;
    
    if (type) {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
      if (botDataCache[type] !== undefined) {
        if (type === 'average_rating') {
          botDataCache[type] = null;
        } else {
          botDataCache[type] = [];
        }
        console.log(`üßπ –ö—ç—à ${type} –æ—á–∏—â–µ–Ω –±–æ—Ç–æ–º`);
      }
    } else {
      // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
      botDataCache = {
        messages: [],
        requests: [],
        errors: [],
        reviews: [],
        support_requests: [],
        chat_messages: [],
        chat_orders: [],
        average_rating: null
      };
      console.log('üßπ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω –±–æ—Ç–æ–º');
    }
    
    res.json({
      success: true,
      message: type ? `–ö—ç—à ${type} –æ—á–∏—â–µ–Ω` : '–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
app.post('/api/bot/store', (req, res) => {
  try {
    const { type, data, timestamp } = req.body;
    
    if (!type || !data) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, data'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const dataWithTimestamp = {
      ...data,
      timestamp: timestamp || new Date().toISOString(),
      received_at: new Date().toISOString()
    };
    
    if (botData[type]) {
      botData[type].push(dataWithTimestamp);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${type}, ID: ${data.id}`);
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${type}`);
    }
    
    res.json({
      success: true,
      message: `–î–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ ${type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`,
      count: botData[type] ? botData[type].length : 0
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ª—é–±—ã—Ö —Å–æ–±—ã—Ç–∏–π
app.post('/api/event', async (req, res) => {
  try {
    const { type, data: eventData, userData, queryId } = req.body;
    
    const payload = {
      type: type,
      data: eventData,
      userData: userData
    };

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    const response = await fetch(`${req.protocol}://${req.get('host')}/webapp-data`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ payload, queryId })
    });

    const result = await response.json();
    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /api/event:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Server-Sent Events endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.get('/api/sse', (req, res) => {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  res.write(`data: ${JSON.stringify({
    type: 'connection',
    message: 'SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    timestamp: new Date().toISOString()
  })}\n\n`);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  const client = { res, id: Date.now() };
  sseConnections.add(client);

  console.log(`üì° SSE –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (ID: ${client.id}). –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseConnections.size}`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  req.on('close', () => {
    sseConnections.delete(client);
    console.log(`üì° SSE –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω (ID: ${client.id}). –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseConnections.size}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  req.on('error', (error) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (ID: ${client.id}):`, error.message);
    sseConnections.delete(client);
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    ok: true,
    timestamp: new Date().toISOString(),
    message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫',
    sseConnections: sseConnections.size
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>‚úÖ Backend-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
    <p><strong>–†–æ–ª—å:</strong> –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±–æ—Ç–æ–º</p>
    <p><strong>URL:</strong> <code>https://server-iyp2.onrender.com</code></p>
    <p><strong>Endpoints:</strong></p>
    <ul>
      <li><code>POST /webapp-data</code> ‚Äî –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App</li>
      <li><code>GET /api/bot/data</code> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞</li>
      <li><code>POST /api/bot/process</code> ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö</li>
      <li><code>POST /api/event</code> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Å–æ–±—ã—Ç–∏–π</li>
      <li><code>GET /health</code> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
    </ul>
    <p><strong>–§—É–Ω–∫—Ü–∏–∏:</strong></p>
    <ul>
      <li>üì® –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞</li>
      <li>üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ø–∞–º—è—Ç–∏</li>
      <li>ü§ñ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –ø–æ –∑–∞–ø—Ä–æ—Å—É</li>
      <li>‚úÖ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ WebApp Query</li>
    </ul>
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <ul>
      <li>–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${miniAppData.pendingData.length}</li>
      <li>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: ${miniAppData.processedData.length}</li>
      <li>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${miniAppData.lastUpdate || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</li>
    </ul>
  `);
});

// –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç –¥–ª—è Render
const PORT = process.env.PORT || 10000;
const HOST = '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log('üöÄ Backend-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—É—â–µ–Ω–æ!');
  console.log(`üìç URL: https://server-iyp2.onrender.com`);
  console.log(`ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üë§ Admin ID: ${ADMIN_ID}`);
  console.log(`üì° –†–µ–∂–∏–º: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞`);
  console.log(`üìä Endpoints: /api/bot/data, /api/bot/process`);
});